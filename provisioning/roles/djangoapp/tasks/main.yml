---
- name: Install git
  apt: name=git

- name: Create sites directory
  file: path=/opt/sites state=directory

- name: Check out {{repo}} to {{app_root}}
  git: repo={{repo}}
       dest={{app_root}}
       accept_hostkey=yes
       update=no

- name: Create virtualenv
  command: virtualenv --python={{python}} {{app_root}}/venv
  args:
    creates: "{{app_root}}/venv"

- name: Install requirements
  pip: virtualenv={{app_root}}/venv
       requirements="{{app_root}}/requirements.txt"

- name: Install envdir
  pip: virtualenv={{app_root}}/venv name=envdir

- name: Create static serving directory
  file: path={{app_root}}/collected-static state=directory

- name: Create media directory
  file: path={{app_root}}/media state=directory owner=www-data group=www-data

- name: Configure NginX
  template: dest=/etc/nginx/sites-available/{{site}}.conf src=nginx_site.conf.j2
  notify: restart nginx

- name: Configure uWSGI
  template: dest=/etc/uwsgi/apps-available/{{site}}.ini src=site_uwsgi.ini.j2

- name: Clean up old config
  file: path=/etc/uwsgi/{{site}}.ini state=absent

- name: Enable app
  file: src=/etc/uwsgi/apps-available/{{site}}.ini
        dest=/etc/uwsgi/apps-enabled/{{site}}.ini
        state=link
        force=yes

- name: Disable default NginX config
  file: path=/etc/nginx/sites-enabled/default state=absent

- name: Enable {{site}} config
  file: dest=/etc/nginx/sites-enabled/{{site}}.conf src=/etc/nginx/sites-available/{{site}}.conf state=link
  notify: restart nginx

- name: ensure {{site}} database is created
  sudo: true
  sudo_user: postgres
  postgresql_db: name={{site}}

- name: ensure {{site}} user has access to {{site}} database
  sudo: true
  sudo_user: postgres
  postgresql_user: db={{site}} name={{site}} password={{dbpassword}} priv=ALL

- name: ensure user does not have unnecessary privilege
  sudo: true
  sudo_user: postgres
  postgresql_user: name={{site}} role_attr_flags=NOSUPERUSER,NOCREATEDB

- name: Create {{site}} envdir
  file: path={{app_root}}/envdir state=directory

- name: Add db config to {{site}} envdir
  template: dest={{app_root}}/envdir/DATABASE_URL src=envdir/DATABASE_URL.j2

- name: Add secret key to {{site}} envdir
  copy: dest={{app_root}}/envdir/SECRET_KEY content={{ secret_key }}

- name: Check for install script
  shell: ls {{app_root}}/install
  ignore_errors: true
  register: install_exists

- name: Run site installation script
  command: ./venv/bin/envdir envdir ./install
  args:
    chdir: "{{app_root}}"
  when: install_exists|success

- name: Install backup script
  template: dest=/etc/cron.daily/{{site}}_backup src=site_backup.j2

- name: Start uWSGI
  service: name=uwsgi state=started
